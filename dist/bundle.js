!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=0)}([function(e,t,r){r(2),e.exports=r(1)},function(e,t,r){},function(e,t,r){"use strict";r.r(t);class n{static async getData(e){const t=await fetch(e);return await t.json()}static getSourceNewsUrl(e,t){return`https://newsapi.org/v2/top-headlines?sources=${e}&apiKey=${t}`}static getSourcesListUrl(e){return`https://newsapi.org/v2/sources?apiKey=${e}`}static formatDate(e,t){return new Intl.DateTimeFormat(t).format(new Date(e))}}class o{static getSources(e,t){n.getData(e).then(({sources:e})=>{e.forEach(({id:e,name:r})=>{const n=document.createElement("button");n.id=e,n.innerHTML=r,t.appendChild(n)})})}}var c={apiKey:"588d8657fc3b48618e0eaae78d639432",noImageUrl:"https://www.classify24.com/wp-content/uploads/2017/04/no-image.png"};class s{static renderNews({title:e,publishedAt:t,description:r,urlToImage:o,url:s}){const a=document.querySelector("#news-template").content;return a.querySelector(".news_title").innerHTML=e,a.querySelector(".news_publishedAt").innerHTML=n.formatDate(t,"ru"),a.querySelector(".news_description").innerHTML=r,a.querySelector(".news_urlToImage").src=o||c.noImageUrl,a.querySelector(".news_url").href=s,a}}class a{static async getNews(e,t){t.innerHTML="";const{articles:r}=await n.getData(e);return r.forEach(e=>{const r=s.renderNews(e);t.appendChild(document.importNode(r,!0))}),r}}(new class{setActiveButton(e,t){t.forEach(e=>e.classList.remove("active")),e.classList.add("active")}setHeaderInfo(e,t){document.querySelector(".header_source").innerHTML=`Source: ${e}`,document.querySelector(".header_amount").innerHTML=`News amount: ${t}`}renderPage(){const{apiKey:e}=c,t=document.querySelector(".container_sources"),r=document.querySelector(".container_news");o.getSources(n.getSourcesListUrl(e),t),t.addEventListener("click",({target:o})=>{if(o instanceof HTMLButtonElement){const{id:c,innerHTML:s}=o;this.setActiveButton(o,t.querySelectorAll("button")),a.getNews(n.getSourceNewsUrl(c,e),r).then(e=>this.setHeaderInfo(s,e.length))}})}}).renderPage()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,